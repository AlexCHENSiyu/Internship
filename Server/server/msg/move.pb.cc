// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: move.proto

#include "move.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR BaseMsg::BaseMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaseMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseMsgDefaultTypeInternal() {}
  union {
    BaseMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseMsgDefaultTypeInternal _BaseMsg_default_instance_;
PROTOBUF_CONSTEXPR JoinRoomMsg::JoinRoomMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.roomid_)*/0
  , /*decltype(_impl_.join_)*/false
  , /*decltype(_impl_.player_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinRoomMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinRoomMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinRoomMsgDefaultTypeInternal() {}
  union {
    JoinRoomMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinRoomMsgDefaultTypeInternal _JoinRoomMsg_default_instance_;
PROTOBUF_CONSTEXPR LeaveRoomMsg::LeaveRoomMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.clientid_)*/0
  , /*decltype(_impl_.leave_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveRoomMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveRoomMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveRoomMsgDefaultTypeInternal() {}
  union {
    LeaveRoomMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveRoomMsgDefaultTypeInternal _LeaveRoomMsg_default_instance_;
PROTOBUF_CONSTEXPR RoomMsg::RoomMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/0
  , /*decltype(_impl_.num_people_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomMsgDefaultTypeInternal() {}
  union {
    RoomMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomMsgDefaultTypeInternal _RoomMsg_default_instance_;
PROTOBUF_CONSTEXPR RoomsMsg::RoomsMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rooms_)*/{}
  , /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.clientid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomsMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomsMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomsMsgDefaultTypeInternal() {}
  union {
    RoomsMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomsMsgDefaultTypeInternal _RoomsMsg_default_instance_;
PROTOBUF_CONSTEXPR MoveMsg::MoveMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.move_x_)*/0
  , /*decltype(_impl_.move_y_)*/0
  , /*decltype(_impl_.validation_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveMsgDefaultTypeInternal() {}
  union {
    MoveMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveMsgDefaultTypeInternal _MoveMsg_default_instance_;
PROTOBUF_CONSTEXPR MessageMsg::MessageMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.clientid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageMsgDefaultTypeInternal() {}
  union {
    MessageMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageMsgDefaultTypeInternal _MessageMsg_default_instance_;
PROTOBUF_CONSTEXPR OrderMsg::OrderMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.white_)*/0
  , /*decltype(_impl_.black_)*/0
  , /*decltype(_impl_.gamestart_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderMsgDefaultTypeInternal() {}
  union {
    OrderMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderMsgDefaultTypeInternal _OrderMsg_default_instance_;
PROTOBUF_CONSTEXPR ChessMapMsg::ChessMapMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_)*/{}
  , /*decltype(_impl_._map_cached_byte_size_)*/{0}
  , /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.step_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChessMapMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChessMapMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChessMapMsgDefaultTypeInternal() {}
  union {
    ChessMapMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChessMapMsgDefaultTypeInternal _ChessMapMsg_default_instance_;
PROTOBUF_CONSTEXPR ResultMsg::ResultMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_type_)*/0
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultMsgDefaultTypeInternal() {}
  union {
    ResultMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultMsgDefaultTypeInternal _ResultMsg_default_instance_;
static ::_pb::Metadata file_level_metadata_move_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_move_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_move_2eproto = nullptr;

const uint32_t TableStruct_move_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BaseMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::BaseMsg, _impl_.msg_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JoinRoomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JoinRoomMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::JoinRoomMsg, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::JoinRoomMsg, _impl_.join_),
  PROTOBUF_FIELD_OFFSET(::JoinRoomMsg, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LeaveRoomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::LeaveRoomMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::LeaveRoomMsg, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::LeaveRoomMsg, _impl_.leave_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RoomMsg, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::RoomMsg, _impl_.num_people_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RoomsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RoomsMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::RoomsMsg, _impl_.clientid_),
  PROTOBUF_FIELD_OFFSET(::RoomsMsg, _impl_.rooms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MoveMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MoveMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::MoveMsg, _impl_.move_x_),
  PROTOBUF_FIELD_OFFSET(::MoveMsg, _impl_.move_y_),
  PROTOBUF_FIELD_OFFSET(::MoveMsg, _impl_.validation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::MessageMsg, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::MessageMsg, _impl_.clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OrderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OrderMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::OrderMsg, _impl_.white_),
  PROTOBUF_FIELD_OFFSET(::OrderMsg, _impl_.black_),
  PROTOBUF_FIELD_OFFSET(::OrderMsg, _impl_.gamestart_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChessMapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ChessMapMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::ChessMapMsg, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::ChessMapMsg, _impl_.step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ResultMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ResultMsg, _impl_.msg_type_),
  PROTOBUF_FIELD_OFFSET(::ResultMsg, _impl_.color_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::BaseMsg)},
  { 7, -1, -1, sizeof(::JoinRoomMsg)},
  { 17, -1, -1, sizeof(::LeaveRoomMsg)},
  { 26, -1, -1, sizeof(::RoomMsg)},
  { 34, -1, -1, sizeof(::RoomsMsg)},
  { 43, -1, -1, sizeof(::MoveMsg)},
  { 53, -1, -1, sizeof(::MessageMsg)},
  { 62, -1, -1, sizeof(::OrderMsg)},
  { 72, -1, -1, sizeof(::ChessMapMsg)},
  { 81, -1, -1, sizeof(::ResultMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_BaseMsg_default_instance_._instance,
  &::_JoinRoomMsg_default_instance_._instance,
  &::_LeaveRoomMsg_default_instance_._instance,
  &::_RoomMsg_default_instance_._instance,
  &::_RoomsMsg_default_instance_._instance,
  &::_MoveMsg_default_instance_._instance,
  &::_MessageMsg_default_instance_._instance,
  &::_OrderMsg_default_instance_._instance,
  &::_ChessMapMsg_default_instance_._instance,
  &::_ResultMsg_default_instance_._instance,
};

const char descriptor_table_protodef_move_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nmove.proto\"%\n\007BaseMsg\022\032\n\010msg_type\030\001 \001("
  "\0162\010.MsgType\"W\n\013JoinRoomMsg\022\032\n\010msg_type\030\001"
  " \001(\0162\010.MsgType\022\016\n\006RoomId\030\002 \001(\005\022\014\n\004join\030\003"
  " \001(\010\022\016\n\006player\030\004 \001(\010\"K\n\014LeaveRoomMsg\022\032\n\010"
  "msg_type\030\001 \001(\0162\010.MsgType\022\020\n\010clientId\030\002 \001"
  "(\005\022\r\n\005leave\030\003 \001(\010\"-\n\007RoomMsg\022\016\n\006roomId\030\001"
  " \001(\005\022\022\n\nnum_people\030\002 \001(\005\"Q\n\010RoomsMsg\022\032\n\010"
  "msg_type\030\001 \001(\0162\010.MsgType\022\020\n\010clientId\030\002 \001"
  "(\005\022\027\n\005rooms\030\n \003(\0132\010.RoomMsg\"Y\n\007MoveMsg\022\032"
  "\n\010msg_type\030\001 \001(\0162\010.MsgType\022\016\n\006move_x\030\002 \001"
  "(\005\022\016\n\006move_y\030\003 \001(\005\022\022\n\nvalidation\030\004 \001(\010\"K"
  "\n\nMessageMsg\022\032\n\010msg_type\030\001 \001(\0162\010.MsgType"
  "\022\017\n\007message\030\002 \001(\t\022\020\n\010clientId\030\003 \001(\005\"W\n\010O"
  "rderMsg\022\032\n\010msg_type\030\001 \001(\0162\010.MsgType\022\r\n\005w"
  "hite\030\002 \001(\005\022\r\n\005black\030\003 \001(\005\022\021\n\tgamestart\030\004"
  " \001(\010\"D\n\013ChessMapMsg\022\032\n\010msg_type\030\001 \001(\0162\010."
  "MsgType\022\013\n\003map\030\002 \003(\005\022\014\n\004step\030\003 \001(\005\"6\n\tRe"
  "sultMsg\022\032\n\010msg_type\030\001 \001(\0162\010.MsgType\022\r\n\005c"
  "olor\030\002 \001(\005*\266\001\n\007MsgType\022\017\n\013BaseMsgType\020\000\022"
  "\023\n\017JoinRoomMsgType\020\001\022\024\n\020LeaveRoomMsgType"
  "\020\002\022\020\n\014RoomsMsgType\020\003\022\017\n\013MoveMsgType\020\004\022\022\n"
  "\016MessageMsgType\020\005\022\020\n\014OrderMsgType\020\006\022\023\n\017C"
  "hessMapMsgType\020\007\022\021\n\rResultMsgType\020\010b\006pro"
  "to3"
  ;
static ::_pbi::once_flag descriptor_table_move_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_move_2eproto = {
    false, false, 923, descriptor_table_protodef_move_2eproto,
    "move.proto",
    &descriptor_table_move_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_move_2eproto::offsets,
    file_level_metadata_move_2eproto, file_level_enum_descriptors_move_2eproto,
    file_level_service_descriptors_move_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_move_2eproto_getter() {
  return &descriptor_table_move_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_move_2eproto(&descriptor_table_move_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_move_2eproto);
  return file_level_enum_descriptors_move_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class BaseMsg::_Internal {
 public:
};

BaseMsg::BaseMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:BaseMsg)
}
BaseMsg::BaseMsg(const BaseMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.msg_type_ = from._impl_.msg_type_;
  // @@protoc_insertion_point(copy_constructor:BaseMsg)
}

inline void BaseMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BaseMsg::~BaseMsg() {
  // @@protoc_insertion_point(destructor:BaseMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BaseMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:BaseMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BaseMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseMsg)
  return target;
}

size_t BaseMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BaseMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseMsg::GetClassData() const { return &_class_data_; }


void BaseMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseMsg*>(&to_msg);
  auto& from = static_cast<const BaseMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:BaseMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseMsg::CopyFrom(const BaseMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BaseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMsg::IsInitialized() const {
  return true;
}

void BaseMsg::InternalSwap(BaseMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_type_, other->_impl_.msg_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[0]);
}

// ===================================================================

class JoinRoomMsg::_Internal {
 public:
};

JoinRoomMsg::JoinRoomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:JoinRoomMsg)
}
JoinRoomMsg::JoinRoomMsg(const JoinRoomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinRoomMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){}
    , decltype(_impl_.roomid_){}
    , decltype(_impl_.join_){}
    , decltype(_impl_.player_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.player_));
  // @@protoc_insertion_point(copy_constructor:JoinRoomMsg)
}

inline void JoinRoomMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){0}
    , decltype(_impl_.roomid_){0}
    , decltype(_impl_.join_){false}
    , decltype(_impl_.player_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JoinRoomMsg::~JoinRoomMsg() {
  // @@protoc_insertion_point(destructor:JoinRoomMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinRoomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoinRoomMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinRoomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:JoinRoomMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.player_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinRoomMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 RoomId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool join = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinRoomMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JoinRoomMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // int32 RoomId = 2;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roomid(), target);
  }

  // bool join = 3;
  if (this->_internal_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_join(), target);
  }

  // bool player = 4;
  if (this->_internal_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JoinRoomMsg)
  return target;
}

size_t JoinRoomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JoinRoomMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 RoomId = 2;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  // bool join = 3;
  if (this->_internal_join() != 0) {
    total_size += 1 + 1;
  }

  // bool player = 4;
  if (this->_internal_player() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinRoomMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinRoomMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinRoomMsg::GetClassData() const { return &_class_data_; }


void JoinRoomMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinRoomMsg*>(&to_msg);
  auto& from = static_cast<const JoinRoomMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:JoinRoomMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_join() != 0) {
    _this->_internal_set_join(from._internal_join());
  }
  if (from._internal_player() != 0) {
    _this->_internal_set_player(from._internal_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinRoomMsg::CopyFrom(const JoinRoomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JoinRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomMsg::IsInitialized() const {
  return true;
}

void JoinRoomMsg::InternalSwap(JoinRoomMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinRoomMsg, _impl_.player_)
      + sizeof(JoinRoomMsg::_impl_.player_)
      - PROTOBUF_FIELD_OFFSET(JoinRoomMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinRoomMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[1]);
}

// ===================================================================

class LeaveRoomMsg::_Internal {
 public:
};

LeaveRoomMsg::LeaveRoomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:LeaveRoomMsg)
}
LeaveRoomMsg::LeaveRoomMsg(const LeaveRoomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveRoomMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){}
    , decltype(_impl_.clientid_){}
    , decltype(_impl_.leave_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leave_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.leave_));
  // @@protoc_insertion_point(copy_constructor:LeaveRoomMsg)
}

inline void LeaveRoomMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){0}
    , decltype(_impl_.clientid_){0}
    , decltype(_impl_.leave_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveRoomMsg::~LeaveRoomMsg() {
  // @@protoc_insertion_point(destructor:LeaveRoomMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveRoomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveRoomMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveRoomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:LeaveRoomMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leave_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.leave_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveRoomMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool leave = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.leave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveRoomMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LeaveRoomMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // int32 clientId = 2;
  if (this->_internal_clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_clientid(), target);
  }

  // bool leave = 3;
  if (this->_internal_leave() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_leave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LeaveRoomMsg)
  return target;
}

size_t LeaveRoomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LeaveRoomMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 clientId = 2;
  if (this->_internal_clientid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientid());
  }

  // bool leave = 3;
  if (this->_internal_leave() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveRoomMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveRoomMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveRoomMsg::GetClassData() const { return &_class_data_; }


void LeaveRoomMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveRoomMsg*>(&to_msg);
  auto& from = static_cast<const LeaveRoomMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:LeaveRoomMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_clientid() != 0) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  if (from._internal_leave() != 0) {
    _this->_internal_set_leave(from._internal_leave());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveRoomMsg::CopyFrom(const LeaveRoomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LeaveRoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveRoomMsg::IsInitialized() const {
  return true;
}

void LeaveRoomMsg::InternalSwap(LeaveRoomMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveRoomMsg, _impl_.leave_)
      + sizeof(LeaveRoomMsg::_impl_.leave_)
      - PROTOBUF_FIELD_OFFSET(LeaveRoomMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveRoomMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[2]);
}

// ===================================================================

class RoomMsg::_Internal {
 public:
};

RoomMsg::RoomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RoomMsg)
}
RoomMsg::RoomMsg(const RoomMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , decltype(_impl_.num_people_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roomid_, &from._impl_.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_people_) -
    reinterpret_cast<char*>(&_impl_.roomid_)) + sizeof(_impl_.num_people_));
  // @@protoc_insertion_point(copy_constructor:RoomMsg)
}

inline void RoomMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){0}
    , decltype(_impl_.num_people_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomMsg::~RoomMsg() {
  // @@protoc_insertion_point(destructor:RoomMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_people_) -
      reinterpret_cast<char*>(&_impl_.roomid_)) + sizeof(_impl_.num_people_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_people = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_people_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // int32 num_people = 2;
  if (this->_internal_num_people() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_people(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomMsg)
  return target;
}

size_t RoomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  // int32 num_people = 2;
  if (this->_internal_num_people() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_people());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomMsg::GetClassData() const { return &_class_data_; }


void RoomMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomMsg*>(&to_msg);
  auto& from = static_cast<const RoomMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RoomMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_num_people() != 0) {
    _this->_internal_set_num_people(from._internal_num_people());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomMsg::CopyFrom(const RoomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMsg::IsInitialized() const {
  return true;
}

void RoomMsg::InternalSwap(RoomMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomMsg, _impl_.num_people_)
      + sizeof(RoomMsg::_impl_.num_people_)
      - PROTOBUF_FIELD_OFFSET(RoomMsg, _impl_.roomid_)>(
          reinterpret_cast<char*>(&_impl_.roomid_),
          reinterpret_cast<char*>(&other->_impl_.roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[3]);
}

// ===================================================================

class RoomsMsg::_Internal {
 public:
};

RoomsMsg::RoomsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RoomsMsg)
}
RoomsMsg::RoomsMsg(const RoomsMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomsMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){from._impl_.rooms_}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientid_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.clientid_));
  // @@protoc_insertion_point(copy_constructor:RoomsMsg)
}

inline void RoomsMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rooms_){arena}
    , decltype(_impl_.msg_type_){0}
    , decltype(_impl_.clientid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomsMsg::~RoomsMsg() {
  // @@protoc_insertion_point(destructor:RoomsMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomsMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rooms_.~RepeatedPtrField();
}

void RoomsMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RoomsMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rooms_.Clear();
  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clientid_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomsMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 clientId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .RoomMsg rooms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rooms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomsMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoomsMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // int32 clientId = 2;
  if (this->_internal_clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_clientid(), target);
  }

  // repeated .RoomMsg rooms = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rooms_size()); i < n; i++) {
    const auto& repfield = this->_internal_rooms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoomsMsg)
  return target;
}

size_t RoomsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RoomsMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomMsg rooms = 10;
  total_size += 1UL * this->_internal_rooms_size();
  for (const auto& msg : this->_impl_.rooms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 clientId = 2;
  if (this->_internal_clientid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomsMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomsMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomsMsg::GetClassData() const { return &_class_data_; }


void RoomsMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomsMsg*>(&to_msg);
  auto& from = static_cast<const RoomsMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RoomsMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rooms_.MergeFrom(from._impl_.rooms_);
  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_clientid() != 0) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomsMsg::CopyFrom(const RoomsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RoomsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsMsg::IsInitialized() const {
  return true;
}

void RoomsMsg::InternalSwap(RoomsMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rooms_.InternalSwap(&other->_impl_.rooms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomsMsg, _impl_.clientid_)
      + sizeof(RoomsMsg::_impl_.clientid_)
      - PROTOBUF_FIELD_OFFSET(RoomsMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomsMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[4]);
}

// ===================================================================

class MoveMsg::_Internal {
 public:
};

MoveMsg::MoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MoveMsg)
}
MoveMsg::MoveMsg(const MoveMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){}
    , decltype(_impl_.move_x_){}
    , decltype(_impl_.move_y_){}
    , decltype(_impl_.validation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.validation_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.validation_));
  // @@protoc_insertion_point(copy_constructor:MoveMsg)
}

inline void MoveMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){0}
    , decltype(_impl_.move_x_){0}
    , decltype(_impl_.move_y_){0}
    , decltype(_impl_.validation_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveMsg::~MoveMsg() {
  // @@protoc_insertion_point(destructor:MoveMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.validation_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.validation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 move_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.move_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 move_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.move_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool validation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.validation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MoveMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // int32 move_x = 2;
  if (this->_internal_move_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_move_x(), target);
  }

  // int32 move_y = 3;
  if (this->_internal_move_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_move_y(), target);
  }

  // bool validation = 4;
  if (this->_internal_validation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_validation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MoveMsg)
  return target;
}

size_t MoveMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MoveMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 move_x = 2;
  if (this->_internal_move_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_move_x());
  }

  // int32 move_y = 3;
  if (this->_internal_move_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_move_y());
  }

  // bool validation = 4;
  if (this->_internal_validation() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveMsg::GetClassData() const { return &_class_data_; }


void MoveMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveMsg*>(&to_msg);
  auto& from = static_cast<const MoveMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_move_x() != 0) {
    _this->_internal_set_move_x(from._internal_move_x());
  }
  if (from._internal_move_y() != 0) {
    _this->_internal_set_move_y(from._internal_move_y());
  }
  if (from._internal_validation() != 0) {
    _this->_internal_set_validation(from._internal_validation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveMsg::CopyFrom(const MoveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveMsg::IsInitialized() const {
  return true;
}

void MoveMsg::InternalSwap(MoveMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveMsg, _impl_.validation_)
      + sizeof(MoveMsg::_impl_.validation_)
      - PROTOBUF_FIELD_OFFSET(MoveMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[5]);
}

// ===================================================================

class MessageMsg::_Internal {
 public:
};

MessageMsg::MessageMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MessageMsg)
}
MessageMsg::MessageMsg(const MessageMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clientid_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.clientid_));
  // @@protoc_insertion_point(copy_constructor:MessageMsg)
}

inline void MessageMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.msg_type_){0}
    , decltype(_impl_.clientid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageMsg::~MessageMsg() {
  // @@protoc_insertion_point(destructor:MessageMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void MessageMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clientid_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.clientid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MessageMsg.message"));
        } else
          goto handle_unusual;
        continue;
      // int32 clientId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MessageMsg.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int32 clientId = 3;
  if (this->_internal_clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageMsg)
  return target;
}

size_t MessageMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 clientId = 3;
  if (this->_internal_clientid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageMsg::GetClassData() const { return &_class_data_; }


void MessageMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageMsg*>(&to_msg);
  auto& from = static_cast<const MessageMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MessageMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_clientid() != 0) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageMsg::CopyFrom(const MessageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMsg::IsInitialized() const {
  return true;
}

void MessageMsg::InternalSwap(MessageMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageMsg, _impl_.clientid_)
      + sizeof(MessageMsg::_impl_.clientid_)
      - PROTOBUF_FIELD_OFFSET(MessageMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[6]);
}

// ===================================================================

class OrderMsg::_Internal {
 public:
};

OrderMsg::OrderMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:OrderMsg)
}
OrderMsg::OrderMsg(const OrderMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){}
    , decltype(_impl_.white_){}
    , decltype(_impl_.black_){}
    , decltype(_impl_.gamestart_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gamestart_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.gamestart_));
  // @@protoc_insertion_point(copy_constructor:OrderMsg)
}

inline void OrderMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){0}
    , decltype(_impl_.white_){0}
    , decltype(_impl_.black_){0}
    , decltype(_impl_.gamestart_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderMsg::~OrderMsg() {
  // @@protoc_insertion_point(destructor:OrderMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrderMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:OrderMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gamestart_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.gamestart_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 white = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.white_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 black = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.black_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool gamestart = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.gamestart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OrderMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // int32 white = 2;
  if (this->_internal_white() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_white(), target);
  }

  // int32 black = 3;
  if (this->_internal_black() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_black(), target);
  }

  // bool gamestart = 4;
  if (this->_internal_gamestart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_gamestart(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OrderMsg)
  return target;
}

size_t OrderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OrderMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 white = 2;
  if (this->_internal_white() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_white());
  }

  // int32 black = 3;
  if (this->_internal_black() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_black());
  }

  // bool gamestart = 4;
  if (this->_internal_gamestart() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderMsg::GetClassData() const { return &_class_data_; }


void OrderMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderMsg*>(&to_msg);
  auto& from = static_cast<const OrderMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:OrderMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_white() != 0) {
    _this->_internal_set_white(from._internal_white());
  }
  if (from._internal_black() != 0) {
    _this->_internal_set_black(from._internal_black());
  }
  if (from._internal_gamestart() != 0) {
    _this->_internal_set_gamestart(from._internal_gamestart());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderMsg::CopyFrom(const OrderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OrderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderMsg::IsInitialized() const {
  return true;
}

void OrderMsg::InternalSwap(OrderMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderMsg, _impl_.gamestart_)
      + sizeof(OrderMsg::_impl_.gamestart_)
      - PROTOBUF_FIELD_OFFSET(OrderMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[7]);
}

// ===================================================================

class ChessMapMsg::_Internal {
 public:
};

ChessMapMsg::ChessMapMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ChessMapMsg)
}
ChessMapMsg::ChessMapMsg(const ChessMapMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChessMapMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){from._impl_.map_}
    , /*decltype(_impl_._map_cached_byte_size_)*/{0}
    , decltype(_impl_.msg_type_){}
    , decltype(_impl_.step_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.step_));
  // @@protoc_insertion_point(copy_constructor:ChessMapMsg)
}

inline void ChessMapMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_){arena}
    , /*decltype(_impl_._map_cached_byte_size_)*/{0}
    , decltype(_impl_.msg_type_){0}
    , decltype(_impl_.step_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChessMapMsg::~ChessMapMsg() {
  // @@protoc_insertion_point(destructor:ChessMapMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChessMapMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_.~RepeatedField();
}

void ChessMapMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChessMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ChessMapMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_.Clear();
  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.step_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChessMapMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_map(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChessMapMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChessMapMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // repeated int32 map = 2;
  {
    int byte_size = _impl_._map_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_map(), byte_size, target);
    }
  }

  // int32 step = 3;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChessMapMsg)
  return target;
}

size_t ChessMapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChessMapMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 map = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.map_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._map_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 step = 3;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChessMapMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChessMapMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChessMapMsg::GetClassData() const { return &_class_data_; }


void ChessMapMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChessMapMsg*>(&to_msg);
  auto& from = static_cast<const ChessMapMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ChessMapMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_.MergeFrom(from._impl_.map_);
  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChessMapMsg::CopyFrom(const ChessMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChessMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessMapMsg::IsInitialized() const {
  return true;
}

void ChessMapMsg::InternalSwap(ChessMapMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_.InternalSwap(&other->_impl_.map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChessMapMsg, _impl_.step_)
      + sizeof(ChessMapMsg::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(ChessMapMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChessMapMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[8]);
}

// ===================================================================

class ResultMsg::_Internal {
 public:
};

ResultMsg::ResultMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ResultMsg)
}
ResultMsg::ResultMsg(const ResultMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResultMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.msg_type_, &from._impl_.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:ResultMsg)
}

inline void ResultMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_type_){0}
    , decltype(_impl_.color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResultMsg::~ResultMsg() {
  // @@protoc_insertion_point(destructor:ResultMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResultMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResultMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ResultMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.msg_type_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MsgType msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_msg_type(static_cast<::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResultMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_msg_type(), target);
  }

  // int32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResultMsg)
  return target;
}

size_t ResultMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResultMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MsgType msg_type = 1;
  if (this->_internal_msg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_msg_type());
  }

  // int32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResultMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultMsg::GetClassData() const { return &_class_data_; }


void ResultMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResultMsg*>(&to_msg);
  auto& from = static_cast<const ResultMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ResultMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_msg_type() != 0) {
    _this->_internal_set_msg_type(from._internal_msg_type());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultMsg::CopyFrom(const ResultMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResultMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultMsg::IsInitialized() const {
  return true;
}

void ResultMsg::InternalSwap(ResultMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResultMsg, _impl_.color_)
      + sizeof(ResultMsg::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(ResultMsg, _impl_.msg_type_)>(
          reinterpret_cast<char*>(&_impl_.msg_type_),
          reinterpret_cast<char*>(&other->_impl_.msg_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_move_2eproto_getter, &descriptor_table_move_2eproto_once,
      file_level_metadata_move_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BaseMsg*
Arena::CreateMaybeMessage< ::BaseMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BaseMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::JoinRoomMsg*
Arena::CreateMaybeMessage< ::JoinRoomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JoinRoomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::LeaveRoomMsg*
Arena::CreateMaybeMessage< ::LeaveRoomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LeaveRoomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomMsg*
Arena::CreateMaybeMessage< ::RoomMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoomMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RoomsMsg*
Arena::CreateMaybeMessage< ::RoomsMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RoomsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::MoveMsg*
Arena::CreateMaybeMessage< ::MoveMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MoveMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageMsg*
Arena::CreateMaybeMessage< ::MessageMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::OrderMsg*
Arena::CreateMaybeMessage< ::OrderMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OrderMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ChessMapMsg*
Arena::CreateMaybeMessage< ::ChessMapMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChessMapMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ResultMsg*
Arena::CreateMaybeMessage< ::ResultMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ResultMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
